install.packages("ggplot2")
install.packages("tidyverse")
install.packages("knitr", dependencies=TRUE)
install.packages("xtable")
library(xtable)
data("tli")
til
tli
xtable(tli[1:10, ])
data(tli)
variable1 <- 1
variable2 = 2
hello_txt <- "Hello world" # just to illustrate the markup
xtable(tli[1:10, ])
getwd()
getwd() + Эвывыв
getwd() + "вывыв"
getwd() * "вывыв"
paste(getwd(), "Мухуров/170417_0014_EEG.edf\")
paste(getwd(), "Мухуров/170417_0014_EEG.edf")
paste(getwd(), "Мухуров//170417_0014_EEG.edf")
paste(getwd(), "Мухуров/170417_0014_EEG.edf")
paste(getwd(), "Мухуров/170417_0014_EEG.edf", sep = '/')
library("edf")
xtable(tli[1:10, ])
install.packages("knitr")
install.packages("knitr")
install.packages("knitr", dependencies = TRUE)
library("edf")
openEeg <- function(shortfilename){
datafile = paste(getwd(), shortfilename, sep = '/')
eeg = read.edf(datafile)
return(eeg)
}
structEegData <- function(eeg){
len = length(eeg$events$annotation)
numberOfStimuli = grep("\\([12]\\)", eeg$events$annotation)
stimuliCount = length(numberOfStimuli)
furiePointsCount = 70;
output = numeric(stimuliCount)
input = matrix(data = 0, nrow = stimuliCount, ncol = 21*furiePointsCount*2)
sampleRate = eeg$header.signal$EEG_Fp1$samplingrate;
samplesCount = round(sampleRate * 0.5)
counter = 0;
for (i in numberOfStimuli)
{
counter = counter + 1
eegSample = numeric(21*furiePointsCount*2)
onSet = round((eeg$events$onset[i] - 0.05)*sampleRate)
for (j in 1:21)
{
buffer = eeg$signal[[j]]$data[onSet:(onSet + samplesCount - 1)]
furie = fft(buffer, inverse = FALSE)
eegSample[(1 + (j - 1)*furiePointsCount*2):((j*2 - 1)*furiePointsCount)]
= log10(Mod(furie[1:furiePointsCount]))
eegSample[(1 + (j*2 - 1)*furiePointsCount):(j*furiePointsCount*2) ]
= Arg(furie[1:furiePointsCount])
}
input[counter,] = eegSample
output[counter] = ifelse( grepl("\\(1\\)", eeg$events$annotation[i]), 1,0);
}
return(input, output)
}
x <-
3 + 1
structEegData <- function(eeg){
len = length(eeg$events$annotation)
numberOfStimuli = grep("\\([12]\\)", eeg$events$annotation)
stimuliCount = length(numberOfStimuli)
furiePointsCount = 70;
output = numeric(stimuliCount)
input = matrix(data = 0, nrow = stimuliCount, ncol = 21*furiePointsCount*2)
sampleRate = eeg$header.signal$EEG_Fp1$samplingrate;
samplesCount = round(sampleRate * 0.5)
counter = 0;
for (i in numberOfStimuli)
{
counter = counter + 1
eegSample = numeric(21*furiePointsCount*2)
onSet = round((eeg$events$onset[i] - 0.05)*sampleRate)
for (j in 1:21)
{
buffer = eeg$signal[[j]]$data[onSet:(onSet + samplesCount - 1)]
furie = fft(buffer, inverse = FALSE)
eegSample[(1 + (j - 1)*furiePointsCount*2):((j*2 - 1)*furiePointsCount)] <-
log10(Mod(furie[1:furiePointsCount]))
eegSample[(1 + (j*2 - 1)*furiePointsCount):(j*furiePointsCount*2) ] <-
Arg(furie[1:furiePointsCount])
}
input[counter,] = eegSample
output[counter] = ifelse( grepl("\\(1\\)", eeg$events$annotation[i]), 1,0);
}
return(input, output)
}
dataFrame <- "Мухуров/170417_0014_EEG.edf" %>% openEeg %>% structEegData
library("tidyverse")
dataFrame
dataFrame <- "Мухуров/170417_0014_EEG.edf" %>% openEeg %>% structEegData
structEegData <- function(eeg){
len = length(eeg$events$annotation)
numberOfStimuli = grep("\\([12]\\)", eeg$events$annotation)
stimuliCount = length(numberOfStimuli)
furiePointsCount = 70;
output = numeric(stimuliCount)
input = matrix(data = 0, nrow = stimuliCount, ncol = 21*furiePointsCount*2)
sampleRate = eeg$header.signal$EEG_Fp1$samplingrate;
samplesCount = round(sampleRate * 0.5)
counter = 0;
for (i in numberOfStimuli)
{
counter = counter + 1
eegSample = numeric(21*furiePointsCount*2)
onSet = round((eeg$events$onset[i] - 0.05)*sampleRate)
for (j in 1:21)
{
buffer = eeg$signal[[j]]$data[onSet:(onSet + samplesCount - 1)]
furie = fft(buffer, inverse = FALSE)
eegSample[(1 + (j - 1)*furiePointsCount*2):((j*2 - 1)*furiePointsCount)] <-
log10(Mod(furie[1:furiePointsCount]))
eegSample[(1 + (j*2 - 1)*furiePointsCount):(j*furiePointsCount*2) ] <-
Arg(furie[1:furiePointsCount])
}
input[counter,] = eegSample
output[counter] = ifelse( grepl("\\(1\\)", eeg$events$annotation[i]), 1,0);
}
data$input = input;
data$output = output;
return(data)
}
dataFrame <- "Мухуров/170417_0014_EEG.edf" %>% openEeg %>% structEegData
data$i = 1
data = c(1, TRUE)
data = list(1, TRUE)
data
structEegData <- function(eeg){
len = length(eeg$events$annotation)
numberOfStimuli = grep("\\([12]\\)", eeg$events$annotation)
stimuliCount = length(numberOfStimuli)
furiePointsCount = 70;
output = numeric(stimuliCount)
input = matrix(data = 0, nrow = stimuliCount, ncol = 21*furiePointsCount*2)
sampleRate = eeg$header.signal$EEG_Fp1$samplingrate;
samplesCount = round(sampleRate * 0.5)
counter = 0;
for (i in numberOfStimuli)
{
counter = counter + 1
eegSample = numeric(21*furiePointsCount*2)
onSet = round((eeg$events$onset[i] - 0.05)*sampleRate)
for (j in 1:21)
{
buffer = eeg$signal[[j]]$data[onSet:(onSet + samplesCount - 1)]
furie = fft(buffer, inverse = FALSE)
eegSample[(1 + (j - 1)*furiePointsCount*2):((j*2 - 1)*furiePointsCount)] <-
log10(Mod(furie[1:furiePointsCount]))
eegSample[(1 + (j*2 - 1)*furiePointsCount):(j*furiePointsCount*2) ] <-
Arg(furie[1:furiePointsCount])
}
input[counter,] = eegSample
output[counter] = ifelse( grepl("\\(1\\)", eeg$events$annotation[i]), 1,0);
}
data = list(x = input, y = output);
return(data)
}
dataFrame <- "Мухуров/170417_0014_EEG.edf" %>% openEeg %>% structEegData
as.numeric(T)
as.numeric(F)
```{r, comment='OpenData', results='markup'}
library("edf")
openEeg <- function(shortfilename){
datafile = paste(getwd(), shortfilename, sep = '/')
eeg = read.edf(datafile)
return(eeg)
}
structEegData <- function(eeg){
numberOfStimuli = grep("\\([12]\\)", eeg$events$annotation) # Находим те события, которые отвечают за стимул
stimuliCount = length(numberOfStimuli)
furiePointsCount = 70;
output = numeric(stimuliCount)
## Подготавливаю матрицу для фходных данных для обучения
input = matrix(data = 0, nrow = stimuliCount, ncol = 21*furiePointsCount*2)
sampleRate = eeg$header.signal$EEG_Fp1$samplingrate;
## Анализ происходит по 0.5 сек
samplesCount = round(sampleRate * 0.5)
counter = 0;
for (i in numberOfStimuli)
{
counter = counter + 1
eegSample = numeric(21*furiePointsCount*2)
onSet = round((eeg$events$onset[i] - 0.05)*sampleRate)
for (j in 1:21)
{
## Изымаем кусочек сигналад для анализа
buffer = eeg$signal[[j]]$data[onSet:(onSet + samplesCount - 1)]
## Рассчитываем БПФ
furie = fft(buffer, inverse = FALSE)
## Вводим амплитуду спектра в обучающую выборку
eegSample[(1 + (j - 1)*furiePointsCount*2):((j*2 - 1)*furiePointsCount)] <-
log10(Mod(furie[1:furiePointsCount]))
## Вводим фазу спектра в обучающую выборку
eegSample[(1 + (j*2 - 1)*furiePointsCount):(j*furiePointsCount*2) ] <-
Arg(furie[1:furiePointsCount])
}
input[counter,] = eegSample
## Выход 0 - показали синий экран, 1 - показали красный
output[counter] = as.numeric(grepl("\\(1\\)", eeg$events$annotation[i]));
}
data = list(x = input, y = output);
return(data)
}
dataFrame1 <- structEegData(openEeg("Мухуров/170417_0014_EEG.edf"))
dataFrame2 <- structEegData(openEeg("Смирнов/24042017.edf"))
rm(dataFrame)
c(dataFrame1$x, dataFrame2$x)
test = c(dataFrame1$x, dataFrame2$x)
rbind(1:3,3:1)
test = rbind(dataFrame1$x, dataFrame2$x)
test = rbind(dataFrame1$y, dataFrame2$y)
test = cbind(dataFrame1$y, dataFrame2$y)
test = cbind(dataFrame1$y, dataFrame2$y)
test = c(dataFrame1$y, dataFrame2$y)
runif(121)>0.7
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
sum(runif(121)>0.7)
frameCount = length(output)
library("edf")
openEeg <- function(shortfilename){
datafile = paste(getwd(), shortfilename, sep = '/')
eeg = read.edf(datafile)
return(eeg)
}
structEegData <- function(eeg){
numberOfStimuli = grep("\\([12]\\)", eeg$events$annotation) # Находим те события, которые отвечают за стимул
stimuliCount = length(numberOfStimuli)
furiePointsCount = 70;
output = numeric(stimuliCount)
## Подготавливаю матрицу для фходных данных для обучения
input = matrix(data = 0, nrow = stimuliCount, ncol = 21*furiePointsCount*2)
sampleRate = eeg$header.signal$EEG_Fp1$samplingrate;
## Анализ происходит по 0.5 сек
samplesCount = round(sampleRate * 0.5)
counter = 0;
for (i in numberOfStimuli)
{
counter = counter + 1
eegSample = numeric(21*furiePointsCount*2)
onSet = round((eeg$events$onset[i] - 0.05)*sampleRate)
for (j in 1:21)
{
## Изымаем кусочек сигналад для анализа
buffer = eeg$signal[[j]]$data[onSet:(onSet + samplesCount - 1)]
## Рассчитываем БПФ
furie = fft(buffer, inverse = FALSE)
## Вводим амплитуду спектра в обучающую выборку
eegSample[(1 + (j - 1)*furiePointsCount*2):((j*2 - 1)*furiePointsCount)] <-
log10(Mod(furie[1:furiePointsCount]))
## Вводим фазу спектра в обучающую выборку
eegSample[(1 + (j*2 - 1)*furiePointsCount):(j*furiePointsCount*2) ] <-
Arg(furie[1:furiePointsCount])
}
input[counter,] = eegSample
## Выход 0 - показали синий экран, 1 - показали красный
output[counter] = as.numeric(grepl("\\(1\\)", eeg$events$annotation[i]));
}
data = list(x = input, y = output);
return(data)
}
dataFrame1 <- structEegData(openEeg("Мухуров/170417_0014_EEG.edf"))
dataFrame2 <- structEegData(openEeg("Смирнов/24042017.edf"))
input = rbind(dataFrame1$x, dataFrame2$x)
output = c(dataFrame1$y, dataFrame2$y)
frameCount = length(output)
trainIndex = runif(frameCount) > 0.2;
inputTrain = input[trainIndex];
inputTrain = input[trainIndex,];
!trainIndex
library("xgboost")
input = rbind(dataFrame1$x, dataFrame2$x)
output = c(dataFrame1$y, dataFrame2$y)
frameCount = length(output)
trainIndex = runif(frameCount) > 0.2
inputTrain = input[trainIndex,]
inputTest = input[!trainIndex,]
outputTrain = output[trainIndex]
outputTest = output[!trainIndex]
dtrain = xgb.DMatrix(data = inputTrain, label = outputTrain)
dtest = xgb.DMatrix(data = inputTest, label = outputTest)
watchlist = list(train = dtrain, test = dtest)
bst <- xgb.train(data = dtrain,  max.depth = 3,eps = 1, nthread = 2, nround = 2, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 2, objective = "binary:logistic", watchlist = watchlist)
input = rbind(dataFrame1$x, dataFrame2$x)
output = c(dataFrame1$y, dataFrame2$y)
frameCount = length(output)
trainIndex = runif(frameCount) > 0.2
inputTrain = input[trainIndex,]
inputTest = input[!trainIndex,]
outputTrain = output[trainIndex]
outputTest = output[!trainIndex]
dtrain = xgb.DMatrix(data = inputTrain, label = outputTrain)
dtest = xgb.DMatrix(data = inputTest, label = outputTest)
watchlist = list(train = dtrain, test = dtest)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 2, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
input = rbind(dataFrame1$x, dataFrame2$x)
output = c(dataFrame1$y, dataFrame2$y)
frameCount = length(output)
trainIndex = runif(frameCount) > 0.2
inputTrain = input[trainIndex,]
inputTest = input[!trainIndex,]
outputTrain = output[trainIndex]
outputTest = output[!trainIndex]
dtrain = xgb.DMatrix(data = inputTrain, label = outputTrain)
dtest = xgb.DMatrix(data = inputTest, label = outputTest)
watchlist = list(train = dtrain, test = dtest)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3,eps = 1, nthread = 2, nround = 4, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2,eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3,eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
library("edf")
library("xgboost")
openEeg <- function(shortfilename){
datafile = paste(getwd(), shortfilename, sep = '/')
eeg = read.edf(datafile)
return(eeg)
}
structEegData <- function(eeg){
numberOfStimuli = grep("\\([12]\\)", eeg$events$annotation) # Находим те события, которые отвечают за стимул
stimuliCount = length(numberOfStimuli)
furiePointsCount = 35;
output = numeric(stimuliCount)
## Подготавливаю матрицу для фходных данных для обучения
input = matrix(data = 0, nrow = stimuliCount, ncol = 21*furiePointsCount*2)
sampleRate = eeg$header.signal$EEG_Fp1$samplingrate;
## Анализ происходит по 0.5 сек
samplesCount = round(sampleRate * 0.5)
counter = 0;
for (i in numberOfStimuli)
{
counter = counter + 1
eegSample = numeric(21*furiePointsCount*2)
onSet = round((eeg$events$onset[i] - 0.05)*sampleRate)
for (j in 1:21)
{
## Изымаем кусочек сигналад для анализа
buffer = eeg$signal[[j]]$data[onSet:(onSet + samplesCount - 1)]
## Рассчитываем БПФ
furie = fft(buffer, inverse = FALSE)
## Вводим амплитуду спектра в обучающую выборку
eegSample[(1 + (j - 1)*furiePointsCount*2):((j*2 - 1)*furiePointsCount)] <-
log10(Mod(furie[1:furiePointsCount]))
## Вводим фазу спектра в обучающую выборку
eegSample[(1 + (j*2 - 1)*furiePointsCount):(j*furiePointsCount*2) ] <-
Arg(furie[1:furiePointsCount])
}
input[counter,] = eegSample
## Выход 0 - показали синий экран, 1 - показали красный
output[counter] = as.numeric(grepl("\\(1\\)", eeg$events$annotation[i]));
}
data = list(x = input, y = output);
return(data)
}
dataFrame1 <- structEegData(openEeg("Мухуров/170417_0014_EEG.edf"))
dataFrame2 <- structEegData(openEeg("Смирнов/24042017.edf"))
input = rbind(dataFrame1$x, dataFrame2$x)
output = c(dataFrame1$y, dataFrame2$y)
frameCount = length(output)
trainIndex = runif(frameCount) > 0.2
inputTrain = input[trainIndex,]
inputTest = input[!trainIndex,]
outputTrain = output[trainIndex]
outputTest = output[!trainIndex]
dtrain = xgb.DMatrix(data = inputTrain, label = outputTrain)
dtest = xgb.DMatrix(data = inputTest, label = outputTest)
watchlist = list(train = dtrain, test = dtest)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
input = rbind(dataFrame1$x, dataFrame2$x)
output = c(dataFrame1$y, dataFrame2$y)
frameCount = length(output)
trainIndex = runif(frameCount) > 0.2
inputTrain = input[trainIndex,]
inputTest = input[!trainIndex,]
outputTrain = output[trainIndex]
outputTest = output[!trainIndex]
dtrain = xgb.DMatrix(data = inputTrain, label = outputTrain)
dtest = xgb.DMatrix(data = inputTest, label = outputTest)
watchlist = list(train = dtrain, test = dtest)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 0.5, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 3, eps = 1.5, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 1, eps = 0.5, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 1, eps = 0.5, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2, eps = 0.5, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 2, eps = 0.5, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 5, eps = 0.5, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
bst <- xgb.train(data = dtrain,  max.depth = 4, eps = 0.5, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
input = rbind(dataFrame1$x, dataFrame2$x)
output = c(dataFrame1$y, dataFrame2$y)
frameCount = length(output)
trainIndex = runif(frameCount) > 0.1
inputTrain = input[trainIndex,]
inputTest = input[!trainIndex,]
outputTrain = output[trainIndex]
outputTest = output[!trainIndex]
dtrain = xgb.DMatrix(data = inputTrain, label = outputTrain)
dtest = xgb.DMatrix(data = inputTest, label = outputTest)
watchlist = list(train = dtrain, test = dtest)
bst <- xgb.train(data = dtrain,  max.depth = 4, eps = 1, nthread = 2, nround = 3, objective = "binary:logistic", watchlist = watchlist)
intsall.packages("wavelets", )
install.packages("wavelets")
library("wavelets")
modwt(sin(0:100/100*pi*12))
ggplot(data = runif(100)) + geom_freqpoly()
ggplot(data = runif(100)) + geom_freqpoly()
ggplot2(data = runif(100)) + geom_freqpoly()
ggplot(data = runif(100)) + geom_freqpoly()
library(ggplot2)
ggplot(data = runif(100)) + geom_freqpoly()
ggplot2(data = runif(100)) + geom_freqpoly()
