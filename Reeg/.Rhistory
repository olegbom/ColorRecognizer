btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
channelCount = length(eeg$signal);
for (j in channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1] # Находим те события, которые отвечают за стимул
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
for(i in 0:fotoStimul-1)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[(onSet + samplesCount*i):(onSet + (samplesCount*(i+1)) - 1)]
}
input = input + buffer;
}
input = input/fotoStimul;
return(input)
}
photoSotrStimules = photoEegData(photoTest)
plot(photoSotrStimules[1,], type='l')
plot(photoSotrStimules[2,], type='l')
plot(photoSotrStimules[3,], type='l')
plot(photoSotrStimules[4,], type='l')
plot(photoSotrStimules[5,], type='l')
source('D:/EEG/ColorRecognizer/Reeg/EegFoto.R', encoding = 'UTF-8', echo=TRUE)
source('D:/EEG/ColorRecognizer/Reeg/EegFoto.R', encoding = 'UTF-8', echo=TRUE)
source('D:/EEG/ColorRecognizer/Reeg/EegFoto.R', encoding = 'UTF-8', echo=TRUE)
photoEegData <- function(eeg, fotoStimul = 9, fotoFreq = 2){
sampleRate = eeg$header.signal$EEG_FP1$samplingrate;
bt <- butter(40, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
channelCount = length(eeg$signal);
for (j in channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1] # Находим те события, которые отвечают за стимул
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
for(i in 0:fotoStimul-1)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[(onSet + samplesCount*i):(onSet + (samplesCount*(i+1)) - 1)]
}
input = input + buffer;
}
input = input/fotoStimul;
return(input)
}
photoSotrStimules = photoEegData(photoTest)
plot(photoSotrStimules[5,], type='l')
plot(Mod(fft(eeg$signal$EEG_O1$data))), type = 'l')
plot(Mod(fft(eeg$signal$EEG_O1$data)), type = 'l')
plot(log10(Mod(fft(eeg$signal$EEG_O1$data)))*10, type = 'l')
for (j in channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
plot(log10(Mod(fft(eeg$signal$EEG_O1$data)))*10, type = 'l')
bt <- butter(40, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
bt
btlow
photoEegData <- function(eeg, fotoStimul = 9, fotoFreq = 2){
sampleRate = eeg$header.signal$EEG_FP1$samplingrate;
bt <- butter(40, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
channelCount = length(eeg$signal);
for (j in 1:channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1] # Находим те события, которые отвечают за стимул
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
for(i in 0:fotoStimul-1)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[(onSet + samplesCount*i):(onSet + (samplesCount*(i+1)) - 1)]
}
input = input + buffer;
}
input = input/fotoStimul;
return(input)
}
photoSotrStimules = photoEegData(photoTest)
View(photoSotrStimules)
View(photoSotrStimules)
for (j in 1:channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
plot(log10(Mod(fft(eeg$signal$EEG_O1$data)))*10, type = 'l')
bt <- butter(4, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
for (j in 1:channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
plot(log10(Mod(fft(eeg$signal$EEG_O1$data)))*10, type = 'l')
eeg = openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf)
eeg = openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf')
plot(log10(Mod(fft(eeg$signal$EEG_O1$data)))*10, type = 'l')
for (j in 1:channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
plot(log10(Mod(fft(eeg$signal$EEG_O1$data)))*10, type = 'l')
plot(log10(Mod(fft(eeg$signal$EEG_O1$data)))*10, type = 'l')
eeg = openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf')
photoSotrStimules = photoEegData(eeg)
View(photoSotrStimules)
View(photoSotrStimules)
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1]
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
for(i in 0:fotoStimul-1)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[(onSet + samplesCount*i):(onSet + (samplesCount*(i+1)) - 1)]
}
input = input + buffer;
}
fotoStimul
input = input/fotoStimul;
View(input)
View(input)
plot(input[1,], type='l')
plot(input[6,], type='l')
plot(input[7,], type='l')
plot(input[8,], type='l')
photoEegData <- function(eeg, fotoStimul = 9, fotoFreq = 2){
sampleRate = eeg$header.signal$EEG_FP1$samplingrate;
bt <- butter(4, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
channelCount = length(eeg$signal);
for (j in 1:channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1] # Находим те события, которые отвечают за стимул
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
for(i in 0:fotoStimul-1)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[(onSet + samplesCount*i):(onSet + (samplesCount*(i+1)) - 1)]
}
input = input + buffer;
}
input = input/fotoStimul;
return(input)
}
photoEegData <- function(eeg, fotoStimul = 9, fotoFreq = 2){
sampleRate = eeg$header.signal$EEG_FP1$samplingrate;
bt <- butter(4, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
channelCount = length(eeg$signal);
for (j in 1:channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1] # Находим те события, которые отвечают за стимул
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
for(i in 0:fotoStimul-1)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[(onSet + samplesCount*i):(onSet + (samplesCount*(i+1)) - 1)]
}
input = input + buffer;
}
input = input/fotoStimul;
return(input)
}
plot(input[8,], type='l')
photoSotrStimules = photoEegData(eeg)
plot(photoSotrStimules[8,], type='l')
plot(photoSotrStimules[1,], type='l')
plot(photoSotrStimules[2,], type='l')
plot(photoSotrStimules[3,], type='l')
plot(photoSotrStimules[15,], type='l')
plot(photoSotrStimules[16,], type='l')
photoTest$events
photoTest$signal$event
sum(photoTest$signal$event)
sum(photoTest$signal$event$data)
plot(photoTest$signal$event$t, photoTest$signal$event$data, type = 'l')
photoTest$signal$event$data[7.148*250]
photoTest$signal$event$data[7.148*250 + 1]
photoTest$signal$event$data[7.148*250 + 2]
photoTest$signal$event$data[7.148*250 -1]
photoTest$signal$event$data[7.148*250 -2]
photoTest$signal$event$t[7.148*250]
photoTest$signal$event$t[7.148*250 + 1]
photoTest$signal$event$data[(7.148*500 -50): (7.148*500 + 50)]
photoTest$signal$event$data[(7.148*500 -50): (7.148*500 + 100)]
photoTest$signal$event$data[(7.148*250 -250): (7.148*250 + 250)]
photoTest$signal$event$data[(87.272*250 -250): (87.272*250 + 250)]
photoTest$signal$event$data[87.272*250 +1]
photoTest$signal$event$data[87.272*250 ]
-1
photoTest$signal$event$data[87.272*250 -1]
photoTest$signal$event$data[(87.272*250): (87.272*250 + 120)]
t = onSet: (onSet + 1200)
events = t[eeg$signal[[channelCount]]$data[t] == 8]
photoEegData <- function(eeg, fotoStimul = 9, fotoFreq = 2){
sampleRate = eeg$header.signal$EEG_FP1$samplingrate;
bt <- butter(4, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
channelCount = length(eeg$signal);
for (j in 1:channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1] # Находим те события, которые отвечают за стимул
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
t = onSet: (onSet + 1200)
events = t[eeg$signal[[channelCount]]$data[t] == 8]
for(i in events)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[i:(i+samplesCount)]
}
input = input + buffer;
}
input = input/length(events);
return(input)
}
plotdsds = photoEegData(openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf'))
View(plotdsds)
View(plotdsds)
t = onSet: (onSet + 1200)
events = t[eeg$signal[[channelCount]]$data[t] == 8]
for(i in events)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[i:(i+samplesCount)]
}
input = input + buffer;
}
events
for(i in events)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[i:(i+samplesCount - 1)]
}
input = input + buffer;
}
View(buffer)
input = input/length(events);
photoEegData <- function(eeg, fotoStimul = 9, fotoFreq = 2){
sampleRate = eeg$header.signal$EEG_FP1$samplingrate;
bt <- butter(4, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
channelCount = length(eeg$signal);
for (j in 1:channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1] # Находим те события, которые отвечают за стимул
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
t = onSet: (onSet + 1200)
events = t[eeg$signal[[channelCount]]$data[t] == 8]
for(i in events)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[i:(i+samplesCount - 1)]
}
input = input + buffer;
}
input = input/length(events);
return(input)
}
plotdsds = photoEegData(openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf'))
plotdsds = photoEegData(openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf'), 9, 2)
plotdsds = photoEegData(openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf'), 9, 2)
plotdsds = photoEegData(openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf'), 9, 2)
plotdsds = photoEegData(openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf'), 9, 2)
fotoStimul = 9, fotoFreq = 2
eeg = openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf')
sampleRate = eeg$header.signal$EEG_FP1$samplingrate;
bt <- butter(4, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
channelCount = length(eeg$signal);
for (j in 1:channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1] # Находим те события, которые отвечают за стимул
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
t = onSet: (onSet + 1200)
events = t[eeg$signal[[channelCount]]$data[t] == 8]
t = onSet: (onSet + 1200)
t = onSet: (onSet + 1200)
events = t[eeg$signal[[channelCount]]$data[t] == 8]
eeg$signal[[channelCount]]$data[t]
eeg$signal[[channelCount-1]]$data[t]
eeg$signal[[channelCount-4]]$data[t]
eeg$signal[[1]$data[t]
eeg$signal[[1]$data[t]
eeg$signal[[1]]$data[t]
eeg$signal$event
eeg$signal[[channelCount+1]]$data[t]
eeg$signal[[channelCount]]$data[t]
eeg$signal
eeg$signal[['event']]$data[t] == 8
eeg$signal[['event']]$data[t]
eeg$signal[['event']]$data[t]
eeg$signal$event$data[t]
eeg$signal$event$data
eeg$signal$event$data[t]
photoEegData <- function(eeg, fotoFreq = 2){
sampleRate = eeg$header.signal$EEG_FP1$samplingrate;
bt <- butter(4, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
channelCount = length(eeg$signal);
for (j in 1:channelCount-1)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1] # Находим те события, которые отвечают за стимул
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
t = onSet: (onSet + 1200)
events = t[eeg$signal[['event']]$data[t] == 8]
for(i in events)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[i:(i+samplesCount - 1)]
}
input = input + buffer;
}
input = input/length(events);
return(input)
}
View(input)
outpMyeeg = openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf')
outputd = photoEegData(outpMyeeg)
photoEegData <- function(eeg, fotoFreq = 2){
sampleRate = eeg$header.signal$EEG_FP1$samplingrate;
bt <- butter(4, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
channelCount = length(eeg$signal);
for (j in 1:channelCount-1)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1] # Находим те события, которые отвечают за стимул
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
t = onSet: (onSet + 1200)
events = t[eeg$signal[[channelCount]]$data[t] == 8]
for(i in events)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[i:(i+samplesCount - 1)]
}
input = input + buffer;
}
input = input/length(events);
return(input)
}
outputd = photoEegData(outpMyeeg)
photoEegData <- function(eeg, fotoFreq = 2){
sampleRate = eeg$header.signal$EEG_FP1$samplingrate;
bt <- butter(4, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
channelCount = length(eeg$signal);
for (j in 1:channelCount)
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1] # Находим те события, которые отвечают за стимул
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
t = onSet: (onSet + 1200)
events = t[eeg$signal[[channelCount]]$data[t] == 8]
for(i in events)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[i:(i+samplesCount - 1)]
}
input = input + buffer;
}
input = input/length(events);
return(input)
}
outputd = photoEegData(outpMyeeg)
photoEegData <- function(eeg, fotoFreq = 2){
sampleRate = eeg$header.signal$EEG_FP1$samplingrate;
bt <- butter(4, W =  c(45/sampleRate*2, 55/sampleRate*2), type = 'stop')
btlow <- butter(8, W = 30/sampleRate*2, type = 'low')
channelCount = length(eeg$signal);
for (j in 1:(channelCount-1))
{
eeg$signal[[j]]$data = filter(bt, eeg$signal[[j]]$data)
eeg$signal[[j]]$data = filter(btlow, eeg$signal[[j]]$data)
}
numberOfStimuli = grep(paste (as.character(fotoFreq) ,""), eeg$events$annotation)[1] # Находим те события, которые отвечают за стимул
timestart = eeg$events$onset[numberOfStimuli];
onSet = round(timestart*sampleRate);
samplesCount = round(sampleRate / fotoFreq);
input = matrix(data = 0, nrow = channelCount, ncol = samplesCount)
t = onSet: (onSet + 1200)
events = t[eeg$signal[[channelCount]]$data[t] == 8]
for(i in events)
{
buffer = matrix(data = 0, nrow = channelCount, ncol = samplesCount);
for (j in 1:channelCount)
{
buffer[j,] = eeg$signal[[j]]$data[i:(i+samplesCount - 1)]
}
input = input + buffer;
}
input = input/length(events);
return(input)
}
outpMyeeg = openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf')
outputd = photoEegData(outpMyeeg)
View(outputd)
plot(outputd, type = 'l'
)
plot(outputd[1,], type = 'l')
plot(outputd[2,], type = 'l')
plot(outputd[3,], type = 'l')
plot(outputd[4,], type = 'l')
plot(outputd[15,], type = 'l')
plot(outputd[16,], type = 'l')
outpMyeeg = openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf')
outputd = photoEegData(outpMyeeg, 4)
plot(outputd[16,], type = 'l')
plot(outputd[15,], type = 'l')
plot((1:length(outputd[15,]))/250,outputd[15,], type = 'l')
plot((1:length(outputd[17,]))/250,outputd[15,], type = 'l')
plot((1:length(outputd[17,]))/250,outputd[17,], type = 'l')
outpMyeeg = openEeg('Тестовые по реальным фотостимуляциям/170428_000008_EEG.edf')
outputd = photoEegData(outpMyeeg, 8)
plot((1:length(outputd[17,]))/250,outputd[17,], type = 'l')
plot((1:length(outputd[17,]))/250,outputd[16,], type = 'l')
plot((1:length(outputd[17,]))/250,outputd[15,], type = 'l')
plot((1:length(outputd[17,]))/250,outputd[14,], type = 'l')
plot((1:length(outputd[17,]))/250,outputd[13,], type = 'l')
